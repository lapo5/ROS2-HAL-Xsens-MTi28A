#!/usr/bin/env python3

import time
import rclpy
from rclpy.node import Node
import numpy as np
import sys
import math
from threading import Thread
from std_msgs.msg import Header
from sensor_msgs.msg import Imu, MagneticField

import os

from hal_xsens_mti_28a import xsens_MTi28A

class IMU_Node(Node):
    def __init__(self):
        super().__init__("xsens_imu_node")

        self.imu = xsens_MTi28A.HAL()
        self.stop = False
        self.declare_parameter("port", "/dev/ttyUSB0")
        self.port = self.get_parameter("port").value

        if not self.imu.init(xsens_MTi28A.Mode.CalibratedData, self.port):

            self.get_logger().info("No XSens MTi28A connected on port: {0}".format(self.port))
            sys.exit(1)

        self.declare_parameter("publish_magnetic", "False")        
        self.publish_magnetic = (self.get_parameter("publish_magnetic").value == "True")

        self.rotvel = np.array([0, 0, 0], dtype=np.float32)
        self.linacc = np.array([0, 0, 0], dtype=np.float32)
        self.magfld = np.array([0, 0, 0], dtype=np.float32)
        
        # Robot Specific: Orientation between imu frame and the expected frame 
        self.rotation_matrix = np.matrix([[1, 0, 0], [0, 1, 0],  [0, 0, 1]], dtype=np.float32)
        
        self.declare_parameter("publishers.imu_data", "/imu/data")
        self.publisher_topic = self.get_parameter("publishers.imu_data").value

        self.declare_parameter("publishers.magnetic_data", "/imu/magnetic")
        self.mag_publisher_topic = self.get_parameter("publishers.magnetic_data").value
        # Publishers
        self.imu_pub = self.create_publisher(Imu, self.publisher_topic, 1)

        if self.publish_magnetic:
            self.mag_pub = self.create_publisher(MagneticField, self.mag_publisher_topic, 1)

        self.declare_parameter("frames.imu_link", "imu_link")
        self.imu_link_frame = self.get_parameter("frames.imu_link").value

        self.declare_parameter("frames.magnetic_imu_link", self.imu_link_frame)
        self.magnetic_imu_link_frame = self.get_parameter("frames.magnetic_imu_link").value

        self.thread = Thread(target=IMU_Node.publish_status, args=[self])
        self.thread.start()

    def cleanup(self):
        self.stop = True
        self.thread.join()

    def publish_status(self):
        msg = Imu()

        msg.orientation.x = 0.0
        msg.orientation.y = 0.0
        msg.orientation.z = 0.0
        msg.orientation.w = 0.0

        msg.orientation_covariance[0] = 1e3
        msg.orientation_covariance[4] = 1e3
        msg.orientation_covariance[8] = 1e3

        msg.angular_velocity_covariance[0] = 0.0004
        msg.angular_velocity_covariance[4] = 0.0004
        msg.angular_velocity_covariance[8] = 0.0004

        msg.linear_acceleration_covariance[0] = 0.0004
        msg.linear_acceleration_covariance[4] = 0.0004
        msg.linear_acceleration_covariance[8] = 0.0004

        mag_msg = MagneticField()

        mag_msg.magnetic_field_covariance[0] = 0.1
        mag_msg.magnetic_field_covariance[4] = 0.1
        mag_msg.magnetic_field_covariance[8] = 0.1

        while(not self.stop):
            self.imu.get_gyro_acc(self.rotvel, self.linacc)

            self.rotvel = np.matmul(self.rotation_matrix, self.rotvel)
            self.rotvel = np.array(self.rotvel).flatten()
            self.linacc = np.matmul(self.rotation_matrix, self.linacc)
            self.linacc = np.array(self.linacc).flatten()

            msg.header = Header()
            msg.header.stamp = self.get_clock().now().to_msg()

            msg.header.frame_id = self.imu_link_frame

            msg.angular_velocity.x = float(self.rotvel[0])
            msg.angular_velocity.y = float(self.rotvel[1])
            msg.angular_velocity.z = float(self.rotvel[2])

            msg.linear_acceleration.x = float(self.linacc[0])
            msg.linear_acceleration.y = float(self.linacc[1])
            msg.linear_acceleration.z = float(self.linacc[2])

            self.imu_pub.publish(msg)

            if not self.publish_magnetic:
                continue

            mag_msg.header = Header()
            mag_msg.header.stamp = self.get_clock().now().to_msg()
            mag_msg.header.frame_id = self.magnetic_imu_link_frame

            mag_msg.magnetic_field.x = float(self.magfld[0])
            mag_msg.magnetic_field.y = float(self.magfld[1])
            mag_msg.magnetic_field.z = float(self.magfld[2])

            self.mag_pub.publish(mag_msg)
        

def main(args=None):

    rclpy.init(args=args)
    node = IMU_Node()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        print('Xsens IMU Node stopped cleanly')
    except BaseException:
        print('Exception in Xsens IMU Node:', file=sys.stderr)
        raise
    finally:
        # Destroy the node explicitly
        node.cleanup()
        # (optional - Done automatically when node is garbage collected)
        rclpy.shutdown()

# Main
if __name__ == '__main__':
    main()
